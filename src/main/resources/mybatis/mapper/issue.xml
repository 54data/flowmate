<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.sailing.flowmate.dao.IssueDao">
	<select id="selectIssueMembers" resultType="Member" parameterType="String">
		SELECT 
		    m.member_id,
		    m.member_name,
		    dept_code.code_name AS member_dept,
		    rank_code.code_name AS member_rank,
		    role_code.code_name AS member_role
		FROM members m
		JOIN common_code dept_code 
		    ON dept_code.code_id = m.member_dept_id
		JOIN common_code rank_code 
		    ON rank_code.code_id = m.member_rank_id
		JOIN common_code role_code 
		    ON role_code.code_id = m.member_role_id
		JOIN project_member pm
		    ON pm.member_id = m.member_id
		WHERE project_id = #{projectId}
		AND role_code.code_name != 'ADMIN'
		AND pm.project_member_enabled = 1
	</select>
	
	<select id="selectIssueNum" resultType="int">
		SELECT issue_seq.NEXTVAL
		FROM dual
	</select>
	
	<select id="selectFmtIssueSeq" parameterType="String" resultType="int">
		SELECT 
			NVL(MAX(TO_NUMBER(SUBSTR(fmt_issue_id, INSTR(fmt_issue_id, '-') + 1))), 0) AS fmt_issue_no 
		FROM issue
		WHERE project_id = #{projectId}
	</select>
	
	<insert id="insertIssue" parameterType="Issue">
		INSERT INTO issue (
			issue_id, project_id, member_id,
			task_id, issue_title, issue_regdate,
			issue_content, fmt_issue_id
		) VALUES (
			#{issueId}, #{projectId}, #{memberId},
			#{taskId}, #{issueTitle}, #{issueRegdate},
			#{issueContent}, #{fmtIssueId}
		)
	</insert>
	
	<select id="selectProjectIssues" parameterType="String">
		SELECT 
			issue_id, project_id, members.member_id,
			members.member_name, task_id, issue_title, 
			issue_regdate, issue_end_date, issue_state, 
			issue_content, fmt_issue_id			
		FROM issue
		JOIN members
			ON issue.member_id = members.member_id
		WHERE project_id = #{projectId}
		AND task_id IS NULL
		AND issue_enabled = 1
		ORDER BY issue_regdate
	</select>
	
	<select id="selectTaskIssues" parameterType="String">
		SELECT 
			issue_id, project_id, members.member_id,
			members.member_name, task_id, issue_title, 
			issue_regdate, issue_end_date, issue_state, 
			issue_content, fmt_issue_id			
		FROM issue
		JOIN members
			ON issue.member_id = members.member_id
		WHERE task_id = #{taskId}
		AND issue_enabled = 1
		ORDER BY issue_regdate
	</select>
	
	<select id="selectProjectIssueProgress" parameterType="String">
		SELECT 
			NVL(ROUND(COUNT(CASE WHEN issue_state = '해결' THEN 1 END) / NULLIF(COUNT(*), 0) * 100, 1), 0) AS issue_progress
		FROM issue
		WHERE project_id = #{projectId}
		AND task_id IS NULL
		AND issue_enabled = 1
	</select>
	
	<select id="selectTaskIssueProgress" parameterType="String">
		SELECT 
			NVL(ROUND(COUNT(CASE WHEN issue_state = '해결' THEN 1 END) / NULLIF(COUNT(*), 0) * 100, 1), 0) AS issue_progress
		FROM issue
		WHERE task_id = #{taskId}
		AND issue_enabled = 1
	</select>
	
	<select id="selectIssueById" parameterType="String">
		SELECT
			issue.member_id, issue.project_id, task_id, 
			issue_title, issue_regdate, issue_state, 
			issue_content, fmt_issue_id, projects.member_id AS project_pm_id
		FROM issue
        JOIN projects
            ON issue.project_id = projects.project_id
		WHERE issue_id = #{issueId}
	</select>
	
	<update id="updateIssueById" parameterType="Issue">
		UPDATE issue
		SET
			issue_title = #{issueTitle},
			issue_content = #{issueContent},
            member_id = #{memberId},
            issue_state = #{issueState},
            issue_update_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
			issue_update_mid = #{issueUpdateMid}
			<if test="issueState.equals('해결')">
				,issue_end_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss')
			</if>
		WHERE issue_id = #{issueId}
	</update>
	
	<update id="updateIssueDataEnabled" parameterType="Map">
		UPDATE issue
		SET 
			issue_enabled = 0,
			issue_update_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
			issue_update_mid = #{issueUpdateMid}
		WHERE issue_id = #{issueId}
	</update>

	<select id="selectNewNo" resultType="int">
		select issue_comment_seq.nextval
		from dual
	</select>

<!-- 	<insert id="enrollIssCmt" parameterType="IssueComment">
		insert into issue_comment (
			issue_comment_id, issue_id, project_id, member_id, 
			issue_comment_regdate, issue_comment_content, issue_comment_parent_id	
		) values (
			#{issueCommentId}, #{issueId}, #{projectId}, #{memberId},
			to_char(sysdate, 'yyyymmddhh24miss'), #{issueCommentContent}, #{issueCommentParentId}
		)
	</insert>
 -->
 
	 <insert id="enrollIssCmt" parameterType="IssueComment">
	    insert into issue_comment (
	        issue_comment_id, issue_id, project_id, member_id, 
	        issue_comment_regdate, issue_comment_content
	        <if test="issueCommentParentId != null">
	            , issue_comment_parent_id
	        </if>
	    ) values (
	        #{issueCommentId}, #{issueId}, #{projectId}, #{memberId},
	        to_char(sysdate, 'yyyymmddhh24miss'), #{issueCommentContent}
	        <if test="issueCommentParentId != null">
	            , #{issueCommentParentId}
	        </if>
	    )
	</insert>
 	
	<select id="leadingIssCmts" parameterType="String" resultType="IssueComment">
	    select 
	        ic.issue_comment_id, 
	        ic.issue_id, 
	        ic.project_id, 
	        ic.member_id,
	        ic.issue_comment_parent_id, 
	        ic.issue_comment_regdate, 
	        ic.issue_comment_content,
	        m.member_name
	    from issue_comment ic
	    join members m on ic.member_id = m.member_id
	    where ic.issue_id = #{issueId}
	    order by ic.issue_comment_regdate 
    </select>
    
    <update id="updateIssCmt" parameterType="IssueComment">
    	update issue_comment
    	set
    		issue_comment_regdate = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
    		issue_comment_content = #{issueCommentContent}
    	where
    		issue_comment_id = #{issueCommentId}	
    </update>
</mapper>