<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.sailing.flowmate.dao.ProjectDao">
	<select id="selectProjectNum" resultType="int">
		SELECT projects_seq.NEXTVAL
		FROM dual
	</select>
	
	<insert id="insertProject" parameterType="Project">
		INSERT INTO projects (
			project_id, member_id, project_name,
			project_start_date, project_due_date,
			project_content, project_regdate, project_state
		) VALUES (
			#{projectId}, #{memberId}, #{projectName},
			#{projectStartDate}, #{projectDueDate},
			#{projectContent}, TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
			CASE
				WHEN TO_CHAR(TO_DATE(#{projectStartDate}, 'YYYYMMDDHH24MISS'), 'YYYY-MM-DD') > SYSDATE THEN '예정'
				ELSE '진행 중'
    		END
		)
	</insert>
	
	<insert id="insertProjectMember" parameterType="ProjectMember">
	    INSERT INTO project_member (project_id, member_id)
	    SELECT #{projectId}, #{memberId}
	    FROM dual
	    WHERE NOT EXISTS (
	        SELECT 1
	        FROM project_member
	        WHERE project_id = #{projectId}
	        AND member_id = #{memberId}
	    )
	</insert>
	
	<select id="selectStepNum" resultType="int">
		SELECT project_step_seq.NEXTVAL
		FROM dual
	</select>
	
	<insert id="insertProjectStep" parameterType="ProjectStep">
		INSERT INTO project_step (
			step_id, project_id, step_name,
			step_start_date, step_due_date
		) VALUES (
			#{stepId}, #{projectId}, #{stepName},
			#{stepStartDate}, #{stepDueDate}
		)
	</insert>
	
	<select id="selectProject" parameterType="String" resultType="Project">
		SELECT 
			project_id, member_id, project_name, project_start_date, 
			project_due_date, project_end_date, project_content, 
			project_state
		FROM projects
		WHERE project_id = #{projectId}
	</select>
	
	<select id="selectProjectStepList" parameterType="String" resultType="ProjectStep">
		SELECT
			step_id, step_name, step_start_date, step_due_date
		FROM project_step
		WHERE project_id = #{projectId}
		AND step_enabled = 1
	</select>
	
	<select id="selectProjectStepTaskCnt" parameterType="String" resultType="ProjectStep">
		SELECT 
	    	COUNT(CASE WHEN task.task_state = '완료' THEN 1 END) AS done_step_task_cnt, 
	    	COUNT(*) AS total_step_task_cnt,
	    	NVL(ROUND(COUNT(CASE WHEN task.task_state = '완료' THEN 1 END) / NULLIF(COUNT(*), 0) * 100, 1), 0) AS step_progress,
	    	ps.step_id
		FROM task
		JOIN project_step ps
		ON task.task_step_id = ps.step_id
		WHERE task.project_id = #{projectId}
		AND ps.step_enabled = 1
		AND task.task_enabled = 1
		GROUP BY ps.step_id
	</select>
	
	<select id="selectMyProjectList" parameterType="String" resultType="Project">
		SELECT 
		    pm1.project_mcnt, pm2.project_id, pm2.member_id,
		    project_start_date, project_due_date, project_end_date, 
		    project_update_date, p.project_name, NVL(t.project_progress, 0) AS project_progress,
		    project_regdate, project_state, member_name
		FROM (
		    SELECT COUNT(*) AS project_mcnt, project_id
		    FROM project_member
		    WHERE project_member_enabled = 1
		    GROUP BY project_id
		) pm1
		JOIN project_member pm2
			ON pm1.project_id = pm2.project_id
		JOIN projects p
			ON pm2.project_id = p.project_id
		JOIN members m
			ON p.member_id = m.member_id
		LEFT JOIN (
		    SELECT 
		    	project_id, ROUND(COUNT(CASE WHEN task_state = '완료' THEN 1 END) / NULLIF(COUNT(*), 0) * 100, 1) AS project_progress
		    FROM task
		    GROUP BY project_id
		) t
		ON pm2.project_id = t.project_id
		WHERE pm2.member_id = #{memberId}
		AND p.project_enabled = 1
		AND project_member_enabled = 1
		ORDER BY project_due_date, pm2.project_id
	</select>
	
	<select id="selectProjectTaskCnt" parameterType="String" resultType="Project">
		SELECT 
		    COUNT(CASE WHEN task_state = '완료' THEN 1 END) AS done_task_cnt, 
		    COUNT(*) AS total_task_cnt,
		    ROUND(COUNT(CASE WHEN task_state = '완료' THEN 1 END) / NULLIF(COUNT(*), 0) * 100, 1) AS project_progress
		FROM task
		WHERE project_id = #{projectId}
		GROUP BY project_id
		
		UNION ALL
		
		SELECT 
		    0 AS done_task_cnt, 
		    0 AS total_task_cnt,
		    0 AS project_progress
		FROM dual
		WHERE NOT EXISTS (
		    SELECT 1
		    FROM task
		    WHERE project_id = #{projectId}
		)
	</select>
	
	<select id="selectProjectMemberList" parameterType="map" resultType="String">
		SELECT pm.member_id
		FROM projects p 
		JOIN project_member pm
		USING(project_id)
		JOIN members m
			ON pm.member_id = m.member_id
		WHERE project_id = #{projectId}
		AND pm.project_member_enabled = 1
	</select>
	
	<select id="selectProjectFileList" parameterType="String" resultType="Files">
		SELECT file_id, file_name, file_type, file_data
		FROM files
		WHERE related_id = #{projectId}
	</select>
	
	<select id="selectProjectTaskList" parameterType="String" resultType="Task">
		SELECT 
		    task.task_id,
		    project_step.step_name,
		    members.member_name,
		    task.task_name,
		    task.task_priority,
		    task.task_state,
		    task.fmt_task_id,
		    NVL(COUNT(issue.issue_id), 0) AS issue_cnt
		FROM (
            SELECT 
                task_id,
                member_id,
                task_step_id,
                task_enabled,
                project_id,
                task_name,
                task_priority,
                task_state,
                fmt_task_id,
                task_regdate
            FROM task
            ORDER BY task_regdate DESC
        ) task
		JOIN members 
		    ON task.member_id = members.member_id
		JOIN project_step
		    ON task.task_step_id = project_step.step_id
		LEFT JOIN (
			SELECT issue_id, task_id
			FROM issue 
			WHERE issue_enabled = 1
		) issue
		    ON task.task_id = issue.task_id
		WHERE task.project_id = #{projectId}
		AND task.task_enabled = 1
		GROUP BY 
		    task.task_id, 
		    project_step.step_name,
		    members.member_name, 
		    task.task_name, 
		    task.task_priority, 
		    task.task_state, 
		    task.fmt_task_id
	    ORDER BY TO_NUMBER(SUBSTR(task.fmt_task_id, INSTR(task.fmt_task_id, '-') + 1)) DESC
	</select>
	
	<update id="updateProjectMemberData" parameterType="Map">
	    <choose>
	        <when test="projectMemberList != null and projectMemberList.size() > 0">
	            UPDATE project_member
	            SET project_member_enabled = 0
	            WHERE project_id = #{projectId}
	            AND member_id NOT IN 
	                <foreach item="projectMemberId" collection="projectMemberList" open="(" separator="," close=")">
	                    #{projectMemberId}
	                </foreach>
	            AND member_id != #{memberId}
	        </when>
	        <otherwise>
	            UPDATE project_member
	            SET project_member_enabled = 0
	            WHERE project_id = #{projectId}
	            AND member_id != #{memberId}
	        </otherwise>
	    </choose>
	</update>
	
	<update id="updateProjectMemberEnabled" parameterType="ProjectMember">
		UPDATE project_member
		SET project_member_enabled = 1
		WHERE project_id = #{projectId}
		AND member_id = #{memberId}
	</update>
	
	<select id="selectProjectMemberExists" parameterType="ProjectMember" resultType="boolean">
		SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END AS memberExists
		FROM project_member
		WHERE member_id = #{memberId}
		AND project_id = #{projectId}
		AND project_member_enabled = 0
	</select>
	
	<update id="updateProjectStep" parameterType="ProjectStep">
		UPDATE project_step
		SET 
	        step_name = #{stepName},
        	step_start_date = #{stepStartDate},
        	step_due_date = #{stepDueDate},
        	step_update_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
        	step_update_mid = #{stepUpdateMid}
       	WHERE step_id = #{stepId} 
       	AND project_id = #{projectId}
	</update>
	
	<update id="UpdateProjectStepEnabled" parameterType="Map">
		UPDATE project_step
		SET
			step_enabled = 0,
			step_update_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
			step_update_mid = #{memberId}
		WHERE project_id = #{projectId}
        AND step_id NOT IN 
        	<foreach item="stepId" collection="stepIdList" open="(" separator="," close=")">
	            #{stepId}
	        </foreach>
	</update>
	
	<update id="updateProject" parameterType="Project">
		UPDATE projects
		SET
			project_name = #{projectName},
			project_start_date = #{projectStartDate},
			project_due_date = #{projectDueDate},
			project_content = #{projectContent},
			project_state = #{projectState},
			<if test="projectState.equals('완료')">
				project_end_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
			</if>
			project_update_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
			project_update_mid = #{projectUpdateMid}
		WHERE project_id = #{projectId}
	</update>
	
	<update id="updateProjectDataEnabled" parameterType="String">
		UPDATE projects
		SET 
			project_enabled = 0,
			project_update_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss'),
			project_update_mid = #{projectUpdateMid}
		WHERE project_id = #{projectId} 
	</update>
	
	<select id="selectProjectIssueList" parameterType="String" resultType="Issue">
		SELECT
		    fmt_issue_id, issue_title, members.member_name, 
		    '[' || task.fmt_task_id || '] ' || task.task_name AS related_task, 
		    (SELECT TO_CHAR(TO_DATE(issue_regdate, 'YYYY-MM-DD HH24:MI:SS'), 'YYYY.MM.DD') FROM dual) AS fmt_issue_regdate, 
		    issue_state, issue.project_id, issue_id
		FROM issue
		JOIN members
			ON issue.member_id = members.member_id
		LEFT JOIN task
			ON issue.task_id = task.task_id
		WHERE issue_enabled = 1
		AND issue.project_id = #{projectId}
	</select>
	
	<select id="selectProjectMember" parameterType="String" resultType="ProjectMember">
		SELECT 
			pm.member_id, member_name, member_dept, 
			member_rank, member_role,
			CASE
		        WHEN projects.member_id = pm.member_id THEN 'PM'
		        ELSE ''
		    END AS is_pm
		FROM projects
		JOIN project_member pm
		USING(project_id)
		JOIN (
		    SELECT 
		        m.member_id,
		        m.member_name,
		        dept_code.code_name AS member_dept,
		        rank_code.code_name AS member_rank,
		        role_code.code_name AS member_role
		    FROM members m
		    JOIN common_code dept_code 
		        ON dept_code.code_id = m.member_dept_id
		    JOIN common_code rank_code 
		        ON rank_code.code_id = m.member_rank_id
		    JOIN common_code role_code 
		        ON role_code.code_id = m.member_role_id
		    AND member_enabled = 1
		    AND member_status = 1
		) m
		    ON pm.member_id = m.member_id
		WHERE project_id = #{projectId}
		AND pm.project_member_enabled = 1
	</select>
	
	<select id="selectProjectMemberManage" parameterType="String" resultType="ProjectMember">
		SELECT 
		    pm.member_id, 
		    member_name, 
		    member_dept, 
		    member_rank, 
		    member_role, 
		    CASE 
		        WHEN pm.project_member_enabled = 1 THEN '활성화'
		        WHEN pm.project_member_enabled = 0 THEN '비활성화'
		    END AS fmt_member_enabled,
		    CASE
		        WHEN projects.member_id = pm.member_id THEN 'PM'
		        ELSE ''
		    END AS is_pm
		FROM projects
		JOIN project_member pm
		    USING(project_id)
		JOIN (
		    SELECT 
		        m.member_id,
		        m.member_name,
		        dept_code.code_name AS member_dept,
		        rank_code.code_name AS member_rank,
		        role_code.code_name AS member_role
		    FROM members m
		    JOIN common_code dept_code 
		        ON dept_code.code_id = m.member_dept_id
		    JOIN common_code rank_code 
		        ON rank_code.code_id = m.member_rank_id
		    JOIN common_code role_code 
		        ON role_code.code_id = m.member_role_id
		    WHERE m.member_status = 1
		    AND m.member_enabled = 1
		) m
		    ON pm.member_id = m.member_id
		WHERE project_id = #{projectId}
		AND pm.project_member_enabled = 1
	</select>
		
	<update id="updateProjectMemberManageEnabled" parameterType="ProjectMember">
		UPDATE project_member
		SET project_member_enabled = #{projectMemberEnabled}
		WHERE project_id = #{projectId}
		AND member_id = #{memberId}
	</update>
	
	<select id="selectMyProjectStatsById" parameterType="map" resultType="Project">
		SELECT 
		    m.project_id, m.project_name, m.member_id, 
		    NVL(total_task_cnt, 0) AS my_total_task_cnt, NVL(inprogress_task_cnt, 0) AS my_inprogress_task_cnt, 
		    NVL(ROUND((inprogress_task_cnt / total_task_cnt), 1) * 100, 0) AS my_inprogress_task_ratio,
		    NVL(tb_task_cnt, 0) AS my_tb_task_cnt, NVL(ROUND((tb_task_cnt / total_task_cnt), 1) * 100, 0) AS my_tb_task_ratio,
		    NVL(done_task_cnt, 0) AS my_done_task_cnt, NVL(ROUND((done_task_cnt / total_task_cnt), 1) * 100, 0) AS my_done_task_ratio, 
		    NVL(hold_task_cnt, 0) AS my_hold_task_cnt, NVL(ROUND((hold_task_cnt / total_task_cnt), 1) * 100, 0) AS my_hold_task_ratio,
		    NVL(total_isu_cnt, 0) AS my_total_isu_cnt
		FROM (
		    SELECT
		        project_id, member_id,
		        COUNT(*) AS total_task_cnt,
		        SUM(CASE WHEN task_state = '진행 중' THEN 1 ELSE 0 END) AS inprogress_task_cnt,
		        SUM(CASE WHEN task_state = '예정' THEN 1 ELSE 0 END) AS tb_task_cnt,
		        SUM(CASE WHEN task_state = '완료' THEN 1 ELSE 0 END) AS done_task_cnt,
		        SUM(CASE WHEN task_state = '보류' THEN 1 ELSE 0 END) AS hold_task_cnt
		    FROM task
		    WHERE task_enabled = 1
		    GROUP BY project_id, member_id
		) t
		RIGHT JOIN (
		    SELECT pm.member_id, pm.project_id, p.project_name
		    FROM members m
		    RIGHT JOIN project_member pm
		        ON pm.member_id = m.member_id
		    JOIN projects p
		        ON pm.project_id = p.project_id
		    WHERE pm.project_member_enabled = 1
		) m
		    ON t.member_id = m.member_id
		    AND t.project_id = m.project_id
		LEFT JOIN (
		    SELECT project_id, member_id, COUNT(*) AS total_isu_cnt
		    FROM issue
		    WHERE issue_enabled = 1
		    GROUP BY project_id, member_id
		) i
		    ON m.member_id = i.member_id
		    and m.project_id = i.project_id
		WHERE m.project_id = #{projectId}
		AND m.member_id = #{memberId}
	</select>
	
	<select id="selectProjectStepStats" parameterType="String" resultType="ProjectStep">
		SELECT 
		    project_id, step_id, step_name,
		    total_task_cnt, inprogress_task_cnt, tb_task_cnt,
		    hold_task_cnt, done_task_cnt, 
		    CASE 
		        WHEN total_task_cnt = 0 THEN 0 
		        ELSE ROUND((done_task_cnt / total_task_cnt) * 100, 1)
		    END AS step_progress
		FROM (
		    SELECT
		        ps.project_id, ps.step_id, ps.step_name,
		        CASE WHEN COUNT(*) = 1 THEN 0 ELSE COUNT(*) END AS total_task_cnt,
		        SUM(CASE WHEN task_state = '진행 중' THEN 1 ELSE 0 END) AS inprogress_task_cnt,
		        SUM(CASE WHEN task_state = '예정' THEN 1 ELSE 0 END) AS tb_task_cnt,
		        SUM(CASE WHEN task_state = '보류' THEN 1 ELSE 0 END) AS hold_task_cnt,
		        SUM(CASE WHEN task_state = '완료' THEN 1 ELSE 0 END) AS done_task_cnt
		    FROM task t
		    RIGHT JOIN project_step ps
		    	ON t.task_step_id = ps.step_id
		    WHERE ps.step_enabled = 1
		    GROUP BY ps.project_id, ps.step_id, step_name
		)
		WHERE project_id = #{projectId}
		ORDER BY step_id
	</select>
	
	<select id="selectIssueStats" parameterType="String" resultType="Issue">
		SELECT 
		    NVL(SUM(CASE WHEN issue_state = '미해결' THEN 1 ELSE 0 END), 0) AS unresolved_isu,
		    NVL(SUM(CASE WHEN issue_state = '해결' THEN 1 ELSE 0 END), 0) AS resolved_isu
		FROM issue i 
		JOIN projects p
		    ON i.project_id = p.project_id
		WHERE i.issue_enabled = 1
		AND p.project_id = #{projectId}
	</select>
	
	<select id="selectProjectMemberTaskStats" parameterType="String" resultType="Member">
		SELECT 
		    p.project_id, pm.member_id, m.member_name, 
		    m.member_dept, m.member_rank,
		    COALESCE(COUNT(DISTINCT t.task_id), 0) AS member_task_cnt,
		    COALESCE(COUNT(DISTINCT i.issue_id), 0) AS member_isu_cnt
		FROM projects p
		JOIN project_member pm 
			ON p.project_id = pm.project_id
		JOIN (
		    SELECT 
		        m.member_id, m.member_name, dept_code.code_name AS member_dept,
		        rank_code.code_name AS member_rank, role_code.code_name AS member_role
		    FROM members m
		    JOIN common_code dept_code 
		    	ON dept_code.code_id = m.member_dept_id
		    JOIN common_code rank_code 
		    	ON rank_code.code_id = m.member_rank_id
		    JOIN common_code role_code 
		    	ON role_code.code_id = m.member_role_id
		    WHERE member_enabled = 1
		    AND member_status = 1
		) m 
			ON pm.member_id = m.member_id
		LEFT JOIN task t 
		    ON t.project_id = pm.project_id 
		    AND t.member_id = pm.member_id 
		    AND t.task_enabled = 1
		LEFT JOIN issue i 
		    ON i.project_id = pm.project_id 
		    AND i.member_id = pm.member_id 
		    AND i.issue_enabled = 1
		WHERE pm.project_member_enabled = 1
		AND p.project_id = #{projectId}
		GROUP BY 
		    p.project_id, pm.member_id, m.member_name, 
		    m.member_dept, m.member_rank
	</select>
	
	<select id="selectProjectTaskStats" parameterType="String" resultType="Project">
		SELECT 
		    NVL(SUM(CASE WHEN new_task_state = '진행 중' THEN 1 ELSE 0 END), 0) AS inprogress_proj_task_cnt,
		    NVL(SUM(CASE WHEN new_task_state = '예정' THEN 1 ELSE 0 END), 0) AS plan_proj_task_cnt,
		    NVL(SUM(CASE WHEN new_task_state = '완료' THEN 1 ELSE 0 END), 0) AS tb_proj_task_cnt,
		    NVL(SUM(CASE WHEN new_task_state = '보류' THEN 1 ELSE 0 END), 0) AS hold_proj_task_cnt,
		    NVL(SUM(CASE WHEN new_task_state = '지연' THEN 1 ELSE 0 END), 0) AS delay_proj_task_cnt
		FROM (
		    SELECT
		        CASE 
		            WHEN task_state = '진행 중' AND SYSDATE > TO_DATE(task_due_date, 'YYYYMMDDHH24MISS') THEN '지연'
		            ELSE task_state 
		        END AS new_task_state
		    FROM projects p
		    JOIN task t
		        ON p.project_id = t.project_id
		        AND t.task_enabled = 1
		    WHERE p.project_id = #{projectId}
		)
	</select>
	
	<update id="updateProjectPlanState">
		<![CDATA[
			UPDATE projects
			SET project_state = '진행 중',
			    project_update_date = TO_CHAR(SYSDATE, 'yyyymmddhh24miss')
			WHERE TO_DATE(project_start_date, 'YYYYMMDDHH24MISS') <= SYSDATE
		]]>
	</update>
</mapper>